spring.application.name=ClaryFi
server.port=8081

# ===============================
# Keycloak OAuth2 Client Configuration
# ===============================
spring.security.oauth2.client.registration.keycloak.client-id=claryfi-backend
spring.security.oauth2.client.registration.keycloak.client-secret=${CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/claryFi

# ===============================
# Keycloak Resource Server (JWT) Configuration
# ===============================
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/claryFi
# If using self-signed cert in HTTPS, you might need to allow insecure connections (dev only)
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/realms/claryFi/protocol/openid-connect/certs

# ===============================
# Database Configuration
# ===============================
spring.datasource.url=jdbc:postgresql://localhost:5432/claryfi_db
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# Admin Account for Keycloak Admin Client
# ===============================
admin.server-url=http://localhost:8080/
admin.realm=claryFi
admin.username=admin
admin.password=admin
